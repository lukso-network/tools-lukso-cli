// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function with given fields: path
func (_m *MockManager) Exists(path string) bool {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockManager_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockManager_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - path string
func (_e *MockManager_Expecter) Exists(path interface{}) *MockManager_Exists_Call {
	return &MockManager_Exists_Call{Call: _e.mock.On("Exists", path)}
}

func (_c *MockManager_Exists_Call) Run(run func(path string)) *MockManager_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_Exists_Call) Return(_a0 bool) *MockManager_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Exists_Call) RunAndReturn(run func(string) bool) *MockManager_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Mkdir provides a mock function with given fields: dst, perm
func (_m *MockManager) Mkdir(dst string, perm os.FileMode) error {
	ret := _m.Called(dst, perm)

	if len(ret) == 0 {
		panic("no return value specified for Mkdir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, os.FileMode) error); ok {
		r0 = rf(dst, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Mkdir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mkdir'
type MockManager_Mkdir_Call struct {
	*mock.Call
}

// Mkdir is a helper method to define mock.On call
//   - dst string
//   - perm os.FileMode
func (_e *MockManager_Expecter) Mkdir(dst interface{}, perm interface{}) *MockManager_Mkdir_Call {
	return &MockManager_Mkdir_Call{Call: _e.mock.On("Mkdir", dst, perm)}
}

func (_c *MockManager_Mkdir_Call) Run(run func(dst string, perm os.FileMode)) *MockManager_Mkdir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(os.FileMode))
	})
	return _c
}

func (_c *MockManager_Mkdir_Call) Return(err error) *MockManager_Mkdir_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_Mkdir_Call) RunAndReturn(run func(string, os.FileMode) error) *MockManager_Mkdir_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: dst, body, perm
func (_m *MockManager) Write(dst string, body []byte, perm os.FileMode) error {
	ret := _m.Called(dst, body, perm)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, os.FileMode) error); ok {
		r0 = rf(dst, body, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockManager_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - dst string
//   - body []byte
//   - perm os.FileMode
func (_e *MockManager_Expecter) Write(dst interface{}, body interface{}, perm interface{}) *MockManager_Write_Call {
	return &MockManager_Write_Call{Call: _e.mock.On("Write", dst, body, perm)}
}

func (_c *MockManager_Write_Call) Run(run func(dst string, body []byte, perm os.FileMode)) *MockManager_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(os.FileMode))
	})
	return _c
}

func (_c *MockManager_Write_Call) Return(err error) *MockManager_Write_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_Write_Call) RunAndReturn(run func(string, []byte, os.FileMode) error) *MockManager_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
