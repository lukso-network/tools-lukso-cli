// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"os"

	mock "github.com/stretchr/testify/mock"
)

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockManager
func (_mock *MockManager) Create(dst string) error {
	ret := _mock.Called(dst)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(dst)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockManager_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - dst
func (_e *MockManager_Expecter) Create(dst interface{}) *MockManager_Create_Call {
	return &MockManager_Create_Call{Call: _e.mock.On("Create", dst)}
}

func (_c *MockManager_Create_Call) Run(run func(dst string)) *MockManager_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_Create_Call) Return(err error) *MockManager_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_Create_Call) RunAndReturn(run func(dst string) error) *MockManager_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockManager
func (_mock *MockManager) Exists(path string) bool {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockManager_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockManager_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - path
func (_e *MockManager_Expecter) Exists(path interface{}) *MockManager_Exists_Call {
	return &MockManager_Exists_Call{Call: _e.mock.On("Exists", path)}
}

func (_c *MockManager_Exists_Call) Run(run func(path string)) *MockManager_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_Exists_Call) Return(b bool) *MockManager_Exists_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockManager_Exists_Call) RunAndReturn(run func(path string) bool) *MockManager_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Mkdir provides a mock function for the type MockManager
func (_mock *MockManager) Mkdir(dst string, perm os.FileMode) error {
	ret := _mock.Called(dst, perm)

	if len(ret) == 0 {
		panic("no return value specified for Mkdir")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, os.FileMode) error); ok {
		r0 = returnFunc(dst, perm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_Mkdir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mkdir'
type MockManager_Mkdir_Call struct {
	*mock.Call
}

// Mkdir is a helper method to define mock.On call
//   - dst
//   - perm
func (_e *MockManager_Expecter) Mkdir(dst interface{}, perm interface{}) *MockManager_Mkdir_Call {
	return &MockManager_Mkdir_Call{Call: _e.mock.On("Mkdir", dst, perm)}
}

func (_c *MockManager_Mkdir_Call) Run(run func(dst string, perm os.FileMode)) *MockManager_Mkdir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(os.FileMode))
	})
	return _c
}

func (_c *MockManager_Mkdir_Call) Return(err error) *MockManager_Mkdir_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_Mkdir_Call) RunAndReturn(run func(dst string, perm os.FileMode) error) *MockManager_Mkdir_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function for the type MockManager
func (_mock *MockManager) Open(path string) (*os.File, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 *os.File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*os.File, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManager_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockManager_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - path
func (_e *MockManager_Expecter) Open(path interface{}) *MockManager_Open_Call {
	return &MockManager_Open_Call{Call: _e.mock.On("Open", path)}
}

func (_c *MockManager_Open_Call) Run(run func(path string)) *MockManager_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_Open_Call) Return(f *os.File, err error) *MockManager_Open_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockManager_Open_Call) RunAndReturn(run func(path string) (*os.File, error)) *MockManager_Open_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type MockManager
func (_mock *MockManager) Remove(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockManager_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - path
func (_e *MockManager_Expecter) Remove(path interface{}) *MockManager_Remove_Call {
	return &MockManager_Remove_Call{Call: _e.mock.On("Remove", path)}
}

func (_c *MockManager_Remove_Call) Run(run func(path string)) *MockManager_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_Remove_Call) Return(err error) *MockManager_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_Remove_Call) RunAndReturn(run func(path string) error) *MockManager_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAll provides a mock function for the type MockManager
func (_mock *MockManager) RemoveAll(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_RemoveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAll'
type MockManager_RemoveAll_Call struct {
	*mock.Call
}

// RemoveAll is a helper method to define mock.On call
//   - path
func (_e *MockManager_Expecter) RemoveAll(path interface{}) *MockManager_RemoveAll_Call {
	return &MockManager_RemoveAll_Call{Call: _e.mock.On("RemoveAll", path)}
}

func (_c *MockManager_RemoveAll_Call) Run(run func(path string)) *MockManager_RemoveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_RemoveAll_Call) Return(err error) *MockManager_RemoveAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_RemoveAll_Call) RunAndReturn(run func(path string) error) *MockManager_RemoveAll_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockManager
func (_mock *MockManager) Write(dst string, body []byte, perm os.FileMode) error {
	ret := _mock.Called(dst, body, perm)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []byte, os.FileMode) error); ok {
		r0 = returnFunc(dst, body, perm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManager_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockManager_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - dst
//   - body
//   - perm
func (_e *MockManager_Expecter) Write(dst interface{}, body interface{}, perm interface{}) *MockManager_Write_Call {
	return &MockManager_Write_Call{Call: _e.mock.On("Write", dst, body, perm)}
}

func (_c *MockManager_Write_Call) Run(run func(dst string, body []byte, perm os.FileMode)) *MockManager_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(os.FileMode))
	})
	return _c
}

func (_c *MockManager_Write_Call) Return(err error) *MockManager_Write_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManager_Write_Call) RunAndReturn(run func(dst string, body []byte, perm os.FileMode) error) *MockManager_Write_Call {
	_c.Call.Return(run)
	return _c
}
