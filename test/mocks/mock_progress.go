// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockProgress is an autogenerated mock type for the Progress type
type MockProgress struct {
	mock.Mock
}

type MockProgress_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProgress) EXPECT() *MockProgress_Expecter {
	return &MockProgress_Expecter{mock: &_m.Mock}
}

// Move provides a mock function with given fields: count
func (_m *MockProgress) Move(count float64) {
	_m.Called(count)
}

// MockProgress_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type MockProgress_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - count float64
func (_e *MockProgress_Expecter) Move(count interface{}) *MockProgress_Move_Call {
	return &MockProgress_Move_Call{Call: _e.mock.On("Move", count)}
}

func (_c *MockProgress_Move_Call) Run(run func(count float64)) *MockProgress_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *MockProgress_Move_Call) Return() *MockProgress_Move_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProgress_Move_Call) RunAndReturn(run func(float64)) *MockProgress_Move_Call {
	_c.Run(run)
	return _c
}

// Render provides a mock function with no fields
func (_m *MockProgress) Render() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Render")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockProgress_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type MockProgress_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
func (_e *MockProgress_Expecter) Render() *MockProgress_Render_Call {
	return &MockProgress_Render_Call{Call: _e.mock.On("Render")}
}

func (_c *MockProgress_Render_Call) Run(run func()) *MockProgress_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProgress_Render_Call) Return(_a0 string) *MockProgress_Render_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProgress_Render_Call) RunAndReturn(run func() string) *MockProgress_Render_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: goal
func (_m *MockProgress) Set(goal float64) {
	_m.Called(goal)
}

// MockProgress_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockProgress_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - goal float64
func (_e *MockProgress_Expecter) Set(goal interface{}) *MockProgress_Set_Call {
	return &MockProgress_Set_Call{Call: _e.mock.On("Set", goal)}
}

func (_c *MockProgress_Set_Call) Run(run func(goal float64)) *MockProgress_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *MockProgress_Set_Call) Return() *MockProgress_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProgress_Set_Call) RunAndReturn(run func(float64)) *MockProgress_Set_Call {
	_c.Run(run)
	return _c
}

// NewMockProgress creates a new instance of MockProgress. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProgress(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProgress {
	mock := &MockProgress{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
