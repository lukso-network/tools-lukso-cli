// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockInstaller creates a new instance of MockInstaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInstaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInstaller {
	mock := &MockInstaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInstaller is an autogenerated mock type for the Installer type
type MockInstaller struct {
	mock.Mock
}

type MockInstaller_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInstaller) EXPECT() *MockInstaller_Expecter {
	return &MockInstaller_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function for the type MockInstaller
func (_mock *MockInstaller) Fetch(url string) ([]byte, error) {
	ret := _mock.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return returnFunc(url)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = returnFunc(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(url)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInstaller_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockInstaller_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - url
func (_e *MockInstaller_Expecter) Fetch(url interface{}) *MockInstaller_Fetch_Call {
	return &MockInstaller_Fetch_Call{Call: _e.mock.On("Fetch", url)}
}

func (_c *MockInstaller_Fetch_Call) Run(run func(url string)) *MockInstaller_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInstaller_Fetch_Call) Return(body []byte, err error) *MockInstaller_Fetch_Call {
	_c.Call.Return(body, err)
	return _c
}

func (_c *MockInstaller_Fetch_Call) RunAndReturn(run func(url string) ([]byte, error)) *MockInstaller_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// InstallFile provides a mock function for the type MockInstaller
func (_mock *MockInstaller) InstallFile(url string, dest string, overwrite bool) error {
	ret := _mock.Called(url, dest, overwrite)

	if len(ret) == 0 {
		panic("no return value specified for InstallFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = returnFunc(url, dest, overwrite)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInstaller_InstallFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallFile'
type MockInstaller_InstallFile_Call struct {
	*mock.Call
}

// InstallFile is a helper method to define mock.On call
//   - url
//   - dest
//   - overwrite
func (_e *MockInstaller_Expecter) InstallFile(url interface{}, dest interface{}, overwrite interface{}) *MockInstaller_InstallFile_Call {
	return &MockInstaller_InstallFile_Call{Call: _e.mock.On("InstallFile", url, dest, overwrite)}
}

func (_c *MockInstaller_InstallFile_Call) Run(run func(url string, dest string, overwrite bool)) *MockInstaller_InstallFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockInstaller_InstallFile_Call) Return(err error) *MockInstaller_InstallFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInstaller_InstallFile_Call) RunAndReturn(run func(url string, dest string, overwrite bool) error) *MockInstaller_InstallFile_Call {
	_c.Call.Return(run)
	return _c
}

// InstallTar provides a mock function for the type MockInstaller
func (_mock *MockInstaller) InstallTar(url string, dest string, archiveName string, pattern string, overwrite bool) error {
	ret := _mock.Called(url, dest, archiveName, pattern, overwrite)

	if len(ret) == 0 {
		panic("no return value specified for InstallTar")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, bool) error); ok {
		r0 = returnFunc(url, dest, archiveName, pattern, overwrite)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInstaller_InstallTar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallTar'
type MockInstaller_InstallTar_Call struct {
	*mock.Call
}

// InstallTar is a helper method to define mock.On call
//   - url
//   - dest
//   - archiveName
//   - pattern
//   - overwrite
func (_e *MockInstaller_Expecter) InstallTar(url interface{}, dest interface{}, archiveName interface{}, pattern interface{}, overwrite interface{}) *MockInstaller_InstallTar_Call {
	return &MockInstaller_InstallTar_Call{Call: _e.mock.On("InstallTar", url, dest, archiveName, pattern, overwrite)}
}

func (_c *MockInstaller_InstallTar_Call) Run(run func(url string, dest string, archiveName string, pattern string, overwrite bool)) *MockInstaller_InstallTar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(bool))
	})
	return _c
}

func (_c *MockInstaller_InstallTar_Call) Return(err error) *MockInstaller_InstallTar_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInstaller_InstallTar_Call) RunAndReturn(run func(url string, dest string, archiveName string, pattern string, overwrite bool) error) *MockInstaller_InstallTar_Call {
	_c.Call.Return(run)
	return _c
}

// InstallZip provides a mock function for the type MockInstaller
func (_mock *MockInstaller) InstallZip(url string, dest string, overwrite bool) error {
	ret := _mock.Called(url, dest, overwrite)

	if len(ret) == 0 {
		panic("no return value specified for InstallZip")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = returnFunc(url, dest, overwrite)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInstaller_InstallZip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallZip'
type MockInstaller_InstallZip_Call struct {
	*mock.Call
}

// InstallZip is a helper method to define mock.On call
//   - url
//   - dest
//   - overwrite
func (_e *MockInstaller_Expecter) InstallZip(url interface{}, dest interface{}, overwrite interface{}) *MockInstaller_InstallZip_Call {
	return &MockInstaller_InstallZip_Call{Call: _e.mock.On("InstallZip", url, dest, overwrite)}
}

func (_c *MockInstaller_InstallZip_Call) Run(run func(url string, dest string, overwrite bool)) *MockInstaller_InstallZip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockInstaller_InstallZip_Call) Return(err error) *MockInstaller_InstallZip_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInstaller_InstallZip_Call) RunAndReturn(run func(url string, dest string, overwrite bool) error) *MockInstaller_InstallZip_Call {
	_c.Call.Return(run)
	return _c
}
