// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	types "github.com/lukso-network/tools-lukso-cli/api/types"
	mock "github.com/stretchr/testify/mock"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with given fields: _a0
func (_m *MockHandler) Init(_a0 types.InitArgs) types.Response {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 types.Response
	if rf, ok := ret.Get(0).(func(types.InitArgs) types.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Response)
		}
	}

	return r0
}

// MockHandler_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockHandler_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - _a0 types.InitArgs
func (_e *MockHandler_Expecter) Init(_a0 interface{}) *MockHandler_Init_Call {
	return &MockHandler_Init_Call{Call: _e.mock.On("Init", _a0)}
}

func (_c *MockHandler_Init_Call) Run(run func(_a0 types.InitArgs)) *MockHandler_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.InitArgs))
	})
	return _c
}

func (_c *MockHandler_Init_Call) Return(_a0 types.Response) *MockHandler_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Init_Call) RunAndReturn(run func(types.InitArgs) types.Response) *MockHandler_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Install provides a mock function with given fields: _a0
func (_m *MockHandler) Install(_a0 types.InstallArgs) types.Response {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Install")
	}

	var r0 types.Response
	if rf, ok := ret.Get(0).(func(types.InstallArgs) types.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Response)
		}
	}

	return r0
}

// MockHandler_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type MockHandler_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
//   - _a0 types.InstallArgs
func (_e *MockHandler_Expecter) Install(_a0 interface{}) *MockHandler_Install_Call {
	return &MockHandler_Install_Call{Call: _e.mock.On("Install", _a0)}
}

func (_c *MockHandler_Install_Call) Run(run func(_a0 types.InstallArgs)) *MockHandler_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.InstallArgs))
	})
	return _c
}

func (_c *MockHandler_Install_Call) Return(_a0 types.Response) *MockHandler_Install_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Install_Call) RunAndReturn(run func(types.InstallArgs) types.Response) *MockHandler_Install_Call {
	_c.Call.Return(run)
	return _c
}

// Logs provides a mock function with given fields: _a0
func (_m *MockHandler) Logs(_a0 types.LogsArgs) types.Response {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Logs")
	}

	var r0 types.Response
	if rf, ok := ret.Get(0).(func(types.LogsArgs) types.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Response)
		}
	}

	return r0
}

// MockHandler_Logs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logs'
type MockHandler_Logs_Call struct {
	*mock.Call
}

// Logs is a helper method to define mock.On call
//   - _a0 types.LogsArgs
func (_e *MockHandler_Expecter) Logs(_a0 interface{}) *MockHandler_Logs_Call {
	return &MockHandler_Logs_Call{Call: _e.mock.On("Logs", _a0)}
}

func (_c *MockHandler_Logs_Call) Run(run func(_a0 types.LogsArgs)) *MockHandler_Logs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.LogsArgs))
	})
	return _c
}

func (_c *MockHandler_Logs_Call) Return(_a0 types.Response) *MockHandler_Logs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Logs_Call) RunAndReturn(run func(types.LogsArgs) types.Response) *MockHandler_Logs_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields: _a0
func (_m *MockHandler) Reset(_a0 types.ResetArgs) types.Response {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 types.Response
	if rf, ok := ret.Get(0).(func(types.ResetArgs) types.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Response)
		}
	}

	return r0
}

// MockHandler_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockHandler_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
//   - _a0 types.ResetArgs
func (_e *MockHandler_Expecter) Reset(_a0 interface{}) *MockHandler_Reset_Call {
	return &MockHandler_Reset_Call{Call: _e.mock.On("Reset", _a0)}
}

func (_c *MockHandler_Reset_Call) Run(run func(_a0 types.ResetArgs)) *MockHandler_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.ResetArgs))
	})
	return _c
}

func (_c *MockHandler_Reset_Call) Return(_a0 types.Response) *MockHandler_Reset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Reset_Call) RunAndReturn(run func(types.ResetArgs) types.Response) *MockHandler_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockHandler) Start(_a0 types.StartArgs) types.Response {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 types.Response
	if rf, ok := ret.Get(0).(func(types.StartArgs) types.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Response)
		}
	}

	return r0
}

// MockHandler_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockHandler_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 types.StartArgs
func (_e *MockHandler_Expecter) Start(_a0 interface{}) *MockHandler_Start_Call {
	return &MockHandler_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockHandler_Start_Call) Run(run func(_a0 types.StartArgs)) *MockHandler_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.StartArgs))
	})
	return _c
}

func (_c *MockHandler_Start_Call) Return(_a0 types.Response) *MockHandler_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Start_Call) RunAndReturn(run func(types.StartArgs) types.Response) *MockHandler_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: _a0
func (_m *MockHandler) Status(_a0 types.StatusArgs) types.Response {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 types.Response
	if rf, ok := ret.Get(0).(func(types.StatusArgs) types.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Response)
		}
	}

	return r0
}

// MockHandler_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockHandler_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - _a0 types.StatusArgs
func (_e *MockHandler_Expecter) Status(_a0 interface{}) *MockHandler_Status_Call {
	return &MockHandler_Status_Call{Call: _e.mock.On("Status", _a0)}
}

func (_c *MockHandler_Status_Call) Run(run func(_a0 types.StatusArgs)) *MockHandler_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.StatusArgs))
	})
	return _c
}

func (_c *MockHandler_Status_Call) Return(_a0 types.Response) *MockHandler_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Status_Call) RunAndReturn(run func(types.StatusArgs) types.Response) *MockHandler_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: _a0
func (_m *MockHandler) Stop(_a0 types.StopArgs) types.Response {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 types.Response
	if rf, ok := ret.Get(0).(func(types.StopArgs) types.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Response)
		}
	}

	return r0
}

// MockHandler_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockHandler_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - _a0 types.StopArgs
func (_e *MockHandler_Expecter) Stop(_a0 interface{}) *MockHandler_Stop_Call {
	return &MockHandler_Stop_Call{Call: _e.mock.On("Stop", _a0)}
}

func (_c *MockHandler_Stop_Call) Run(run func(_a0 types.StopArgs)) *MockHandler_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.StopArgs))
	})
	return _c
}

func (_c *MockHandler_Stop_Call) Return(_a0 types.Response) *MockHandler_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Stop_Call) RunAndReturn(run func(types.StopArgs) types.Response) *MockHandler_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *MockHandler) Update(_a0 types.UpdateArgs) types.Response {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 types.Response
	if rf, ok := ret.Get(0).(func(types.UpdateArgs) types.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Response)
		}
	}

	return r0
}

// MockHandler_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockHandler_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 types.UpdateArgs
func (_e *MockHandler_Expecter) Update(_a0 interface{}) *MockHandler_Update_Call {
	return &MockHandler_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *MockHandler_Update_Call) Run(run func(_a0 types.UpdateArgs)) *MockHandler_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.UpdateArgs))
	})
	return _c
}

func (_c *MockHandler_Update_Call) Return(_a0 types.Response) *MockHandler_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Update_Call) RunAndReturn(run func(types.UpdateArgs) types.Response) *MockHandler_Update_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatorExit provides a mock function with given fields: _a0
func (_m *MockHandler) ValidatorExit(_a0 types.ValidatorExitArgs) types.Response {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorExit")
	}

	var r0 types.Response
	if rf, ok := ret.Get(0).(func(types.ValidatorExitArgs) types.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Response)
		}
	}

	return r0
}

// MockHandler_ValidatorExit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorExit'
type MockHandler_ValidatorExit_Call struct {
	*mock.Call
}

// ValidatorExit is a helper method to define mock.On call
//   - _a0 types.ValidatorExitArgs
func (_e *MockHandler_Expecter) ValidatorExit(_a0 interface{}) *MockHandler_ValidatorExit_Call {
	return &MockHandler_ValidatorExit_Call{Call: _e.mock.On("ValidatorExit", _a0)}
}

func (_c *MockHandler_ValidatorExit_Call) Run(run func(_a0 types.ValidatorExitArgs)) *MockHandler_ValidatorExit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.ValidatorExitArgs))
	})
	return _c
}

func (_c *MockHandler_ValidatorExit_Call) Return(_a0 types.Response) *MockHandler_ValidatorExit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_ValidatorExit_Call) RunAndReturn(run func(types.ValidatorExitArgs) types.Response) *MockHandler_ValidatorExit_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatorImport provides a mock function with given fields: _a0
func (_m *MockHandler) ValidatorImport(_a0 types.ValidatorImportArgs) types.Response {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorImport")
	}

	var r0 types.Response
	if rf, ok := ret.Get(0).(func(types.ValidatorImportArgs) types.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Response)
		}
	}

	return r0
}

// MockHandler_ValidatorImport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorImport'
type MockHandler_ValidatorImport_Call struct {
	*mock.Call
}

// ValidatorImport is a helper method to define mock.On call
//   - _a0 types.ValidatorImportArgs
func (_e *MockHandler_Expecter) ValidatorImport(_a0 interface{}) *MockHandler_ValidatorImport_Call {
	return &MockHandler_ValidatorImport_Call{Call: _e.mock.On("ValidatorImport", _a0)}
}

func (_c *MockHandler_ValidatorImport_Call) Run(run func(_a0 types.ValidatorImportArgs)) *MockHandler_ValidatorImport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.ValidatorImportArgs))
	})
	return _c
}

func (_c *MockHandler_ValidatorImport_Call) Return(_a0 types.Response) *MockHandler_ValidatorImport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_ValidatorImport_Call) RunAndReturn(run func(types.ValidatorImportArgs) types.Response) *MockHandler_ValidatorImport_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatorList provides a mock function with given fields: _a0
func (_m *MockHandler) ValidatorList(_a0 types.ValidatorListArgs) types.Response {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorList")
	}

	var r0 types.Response
	if rf, ok := ret.Get(0).(func(types.ValidatorListArgs) types.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Response)
		}
	}

	return r0
}

// MockHandler_ValidatorList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorList'
type MockHandler_ValidatorList_Call struct {
	*mock.Call
}

// ValidatorList is a helper method to define mock.On call
//   - _a0 types.ValidatorListArgs
func (_e *MockHandler_Expecter) ValidatorList(_a0 interface{}) *MockHandler_ValidatorList_Call {
	return &MockHandler_ValidatorList_Call{Call: _e.mock.On("ValidatorList", _a0)}
}

func (_c *MockHandler_ValidatorList_Call) Run(run func(_a0 types.ValidatorListArgs)) *MockHandler_ValidatorList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.ValidatorListArgs))
	})
	return _c
}

func (_c *MockHandler_ValidatorList_Call) Return(_a0 types.Response) *MockHandler_ValidatorList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_ValidatorList_Call) RunAndReturn(run func(types.ValidatorListArgs) types.Response) *MockHandler_ValidatorList_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields: _a0
func (_m *MockHandler) Version(_a0 types.VersionArgs) types.Response {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 types.Response
	if rf, ok := ret.Get(0).(func(types.VersionArgs) types.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Response)
		}
	}

	return r0
}

// MockHandler_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockHandler_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
//   - _a0 types.VersionArgs
func (_e *MockHandler_Expecter) Version(_a0 interface{}) *MockHandler_Version_Call {
	return &MockHandler_Version_Call{Call: _e.mock.On("Version", _a0)}
}

func (_c *MockHandler_Version_Call) Run(run func(_a0 types.VersionArgs)) *MockHandler_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.VersionArgs))
	})
	return _c
}

func (_c *MockHandler_Version_Call) Return(_a0 types.Response) *MockHandler_Version_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Version_Call) RunAndReturn(run func(types.VersionArgs) types.Response) *MockHandler_Version_Call {
	_c.Call.Return(run)
	return _c
}

// VersionClients provides a mock function with given fields: _a0
func (_m *MockHandler) VersionClients(_a0 types.VersionClientsArgs) types.Response {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for VersionClients")
	}

	var r0 types.Response
	if rf, ok := ret.Get(0).(func(types.VersionClientsArgs) types.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Response)
		}
	}

	return r0
}

// MockHandler_VersionClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VersionClients'
type MockHandler_VersionClients_Call struct {
	*mock.Call
}

// VersionClients is a helper method to define mock.On call
//   - _a0 types.VersionClientsArgs
func (_e *MockHandler_Expecter) VersionClients(_a0 interface{}) *MockHandler_VersionClients_Call {
	return &MockHandler_VersionClients_Call{Call: _e.mock.On("VersionClients", _a0)}
}

func (_c *MockHandler_VersionClients_Call) Run(run func(_a0 types.VersionClientsArgs)) *MockHandler_VersionClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.VersionClientsArgs))
	})
	return _c
}

func (_c *MockHandler_VersionClients_Call) Return(_a0 types.Response) *MockHandler_VersionClients_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_VersionClients_Call) RunAndReturn(run func(types.VersionClientsArgs) types.Response) *MockHandler_VersionClients_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
