// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	types "github.com/lukso-network/tools-lukso-cli/api/types"
	mock "github.com/stretchr/testify/mock"
)

// MockHandlerFunc is an autogenerated mock type for the HandlerFunc type
type MockHandlerFunc[Rq types.Request, Rs types.Response] struct {
	mock.Mock
}

type MockHandlerFunc_Expecter[Rq types.Request, Rs types.Response] struct {
	mock *mock.Mock
}

func (_m *MockHandlerFunc[Rq, Rs]) EXPECT() *MockHandlerFunc_Expecter[Rq, Rs] {
	return &MockHandlerFunc_Expecter[Rq, Rs]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockHandlerFunc[Rq, Rs]) Execute(_a0 Rq) Rs {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 Rs
	if rf, ok := ret.Get(0).(func(Rq) Rs); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Rs)
		}
	}

	return r0
}

// MockHandlerFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockHandlerFunc_Execute_Call[Rq types.Request, Rs types.Response] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 Rq
func (_e *MockHandlerFunc_Expecter[Rq, Rs]) Execute(_a0 interface{}) *MockHandlerFunc_Execute_Call[Rq, Rs] {
	return &MockHandlerFunc_Execute_Call[Rq, Rs]{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockHandlerFunc_Execute_Call[Rq, Rs]) Run(run func(_a0 Rq)) *MockHandlerFunc_Execute_Call[Rq, Rs] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Rq))
	})
	return _c
}

func (_c *MockHandlerFunc_Execute_Call[Rq, Rs]) Return(_a0 Rs) *MockHandlerFunc_Execute_Call[Rq, Rs] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandlerFunc_Execute_Call[Rq, Rs]) RunAndReturn(run func(Rq) Rs) *MockHandlerFunc_Execute_Call[Rq, Rs] {
	_c.Call.Return(run)
	return _c
}

// NewMockHandlerFunc creates a new instance of MockHandlerFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandlerFunc[Rq types.Request, Rs types.Response](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandlerFunc[Rq, Rs] {
	mock := &MockHandlerFunc[Rq, Rs]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
