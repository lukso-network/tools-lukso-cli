// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/lukso-network/tools-lukso-cli/config"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConfigurator creates a new instance of MockConfigurator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigurator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigurator {
	mock := &MockConfigurator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigurator is an autogenerated mock type for the Configurator type
type MockConfigurator struct {
	mock.Mock
}

type MockConfigurator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigurator) EXPECT() *MockConfigurator_Expecter {
	return &MockConfigurator_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockConfigurator
func (_mock *MockConfigurator) Create(cfg config.NodeConfig) error {
	ret := _mock.Called(cfg)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(config.NodeConfig) error); ok {
		r0 = returnFunc(cfg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigurator_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockConfigurator_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - cfg
func (_e *MockConfigurator_Expecter) Create(cfg interface{}) *MockConfigurator_Create_Call {
	return &MockConfigurator_Create_Call{Call: _e.mock.On("Create", cfg)}
}

func (_c *MockConfigurator_Create_Call) Run(run func(cfg config.NodeConfig)) *MockConfigurator_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.NodeConfig))
	})
	return _c
}

func (_c *MockConfigurator_Create_Call) Return(err error) *MockConfigurator_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigurator_Create_Call) RunAndReturn(run func(cfg config.NodeConfig) error) *MockConfigurator_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockConfigurator
func (_mock *MockConfigurator) Exists() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConfigurator_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockConfigurator_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
func (_e *MockConfigurator_Expecter) Exists() *MockConfigurator_Exists_Call {
	return &MockConfigurator_Exists_Call{Call: _e.mock.On("Exists")}
}

func (_c *MockConfigurator_Exists_Call) Run(run func()) *MockConfigurator_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigurator_Exists_Call) Return(b bool) *MockConfigurator_Exists_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConfigurator_Exists_Call) RunAndReturn(run func() bool) *MockConfigurator_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockConfigurator
func (_mock *MockConfigurator) Get() config.NodeConfig {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 config.NodeConfig
	if returnFunc, ok := ret.Get(0).(func() config.NodeConfig); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(config.NodeConfig)
	}
	return r0
}

// MockConfigurator_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockConfigurator_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockConfigurator_Expecter) Get() *MockConfigurator_Get_Call {
	return &MockConfigurator_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockConfigurator_Get_Call) Run(run func()) *MockConfigurator_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigurator_Get_Call) Return(cfg config.NodeConfig) *MockConfigurator_Get_Call {
	_c.Call.Return(cfg)
	return _c
}

func (_c *MockConfigurator_Get_Call) RunAndReturn(run func() config.NodeConfig) *MockConfigurator_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockConfigurator
func (_mock *MockConfigurator) Set(cfg config.NodeConfig) error {
	ret := _mock.Called(cfg)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(config.NodeConfig) error); ok {
		r0 = returnFunc(cfg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigurator_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockConfigurator_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - cfg
func (_e *MockConfigurator_Expecter) Set(cfg interface{}) *MockConfigurator_Set_Call {
	return &MockConfigurator_Set_Call{Call: _e.mock.On("Set", cfg)}
}

func (_c *MockConfigurator_Set_Call) Run(run func(cfg config.NodeConfig)) *MockConfigurator_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.NodeConfig))
	})
	return _c
}

func (_c *MockConfigurator_Set_Call) Return(err error) *MockConfigurator_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigurator_Set_Call) RunAndReturn(run func(cfg config.NodeConfig) error) *MockConfigurator_Set_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockConfigurator
func (_mock *MockConfigurator) Write() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigurator_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockConfigurator_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
func (_e *MockConfigurator_Expecter) Write() *MockConfigurator_Write_Call {
	return &MockConfigurator_Write_Call{Call: _e.mock.On("Write")}
}

func (_c *MockConfigurator_Write_Call) Run(run func()) *MockConfigurator_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigurator_Write_Call) Return(err error) *MockConfigurator_Write_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigurator_Write_Call) RunAndReturn(run func() error) *MockConfigurator_Write_Call {
	_c.Call.Return(run)
	return _c
}
